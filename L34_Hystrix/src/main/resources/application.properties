spring.application.name=demo-order
logging.level.root=debug

hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=1000

#hystrix.command.default.circuitBreaker.requestVolumeThreshold: This property sets the minimum number of requests in a rolling window that will trip the circuit. For example, if this is set to 20, then if 19 requests come in and all fail, the circuit will not trip open.
#2.	hystrix.command.default.circuitBreaker.errorThresholdPercentage: This property sets the error percentage at or above which the circuit should trip open and start short-circuiting requests to fallback logic.
#3.	hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds: This property sets the amount of time, in milliseconds, after which Hystrix will try to close the circuit and allow requests to pass through again.
#4.	hystrix.command.default.metrics.rollingStats.timeInMilliseconds: This property sets the duration of the statistical rolling window, in milliseconds. This is the duration Hystrix uses to measure metrics.
#5.	hystrix.command.default.metrics.rollingStats.numBuckets: This property sets the number of buckets in the rolling window. A higher number of buckets results in more granular metrics, but it uses more memory and CPU.

# requestVolumeThreshold=10: The circuit breaker will consider tripping if at least 10 requests are made in the rolling window.
# errorThresholdPercentage=50: If 50% or more of the requests fail, the circuit breaker will trip.
# sleepWindowInMilliseconds=5000: After the circuit breaker trips, it will sleep for 5 seconds before trying to allow requests to pass through again.
# timeInMilliseconds=10000: The rolling window is set to 10 seconds.
# numBuckets=10: The rolling window is divided into 10 buckets, each 1 second long.
